{"version":3,"sources":["components/Table.js","components/TableRow.js","util/util.js","components/App.js","serviceWorker.js","index.js"],"names":["Table","className","title","this","props","children","Component","TableRow","index","type","name","placeholder","value","row","onChange","event","target","dbType","htmlType","validations","checked","searchable","fillable","primary","inForm","inIndex","inView","jsonFormatter","json","p","push","m","pop","i","tabs","count","Array","join","out","indent","replace","length","c","charAt","saveFile","a","document","createElement","body","appendChild","style","data","fileName","blob","Blob","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","singleRow","App","addRow","cState","state","schemas","setState","removeRow","updateModelName","modelName","updateRow","input","console","log","newState","downloadFile","JSON","stringify","id","map","key","onClick","xmlns","viewBox","d","language","codeStyle","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bffef5d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\" overflow-x-auto\">\r\n                <table className=\"w-full text-center table-collapse border\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"> #</th>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"> name</th>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"> dbType</th>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"> htmlType</th>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"> validations</th>\r\n                        <th className=\"text-sm font-semibold text-gray-700 p-2 bg-gray-100\"\r\n                            title=\"(searchable, fillable, primary, inForm, inIndex)\"> Options\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody className=\"align-baseline\">\r\n                    {this.props.children}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react';\r\n\r\nclass TableRow extends Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap\">{this.props.index + 1}</td>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap\">\r\n                    <input type=\"text\" name=\"name\" placeholder=\"Enter name\" value={this.props.row.name} onChange={(event => {this.props.onChange(event.target)})}\r\n                           className=\"border rounded py-1 px-2 text-grey-darkest md:ml-2 focus:outline-none focus:bg-white focus:border-gray-500\"/>\r\n                </td>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap\">\r\n                    <input type=\"text\" name=\"dbType\" placeholder=\"Enter dbType\" value={this.props.row.dbType} onChange={(event => {this.props.onChange(event.target)})}\r\n                           className=\"border rounded py-1 px-2 text-grey-darkest md:ml-2 focus:outline-none focus:bg-white focus:border-gray-500\"/>\r\n                </td>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap\">\r\n                    <input type=\"text\" name=\"htmlType\" placeholder=\"Enter htmlType\" value={this.props.row.htmlType} onChange={(event => {this.props.onChange(event.target)})}\r\n                           className=\"border rounded py-1 px-2 text-grey-darkest md:ml-2 focus:outline-none focus:bg-white focus:border-gray-500\"/>\r\n                </td>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap\">\r\n                    <input type=\"text\" name=\"validations\" placeholder=\"Enter validations\" value={this.props.row.validations} onChange={(event => {this.props.onChange(event.target)})}\r\n                           className=\"border rounded py-1 px-2 text-grey-darkest md:ml-2 focus:outline-none focus:bg-white focus:border-gray-500\"/>\r\n                </td>\r\n                <td className=\"p-2 border-t border-gray-300 font-mono text-xs text-purple-700 whitespace-no-wrap text-left\">\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"searchable\" className=\"form-check-input\" checked={this.props.row.searchable} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            searchable\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"fillable\" className=\"form-check-input\" checked={this.props.row.fillable} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            fillable\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"primary\" className=\"form-check-input\" checked={this.props.row.primary} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            primary\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"inForm\" className=\"form-check-input\" checked={this.props.row.inForm} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            inForm\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"inIndex\" className=\"form-check-input\" checked={this.props.row.inIndex} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            inIndex\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <label className=\"form-check-label\">\r\n                            <input type=\"checkbox\" name=\"inView\" className=\"form-check-input\" checked={this.props.row.inView} onChange={(event => {this.props.onChange(event.target)})}/>\r\n                            inView\r\n                        </label>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableRow;","export function jsonFormatter( json ) {\r\n    var p = [],\r\n        push = function( m ) { return '\\\\' + p.push( m ) + '\\\\'; },\r\n        pop = function( m, i ) { return p[i-1] },\r\n        tabs = function( count ) { return new Array( count + 1 ).join( '\\t' ); };\r\n    p = [];\r\n    var out = \"\",\r\n        indent = 0;\r\n\r\n    // Extract backslashes and strings\r\n    json = json\r\n        .replace( /\\\\./g, push )\r\n        .replace( /(\".*?\"|'.*?')/g, push )\r\n        .replace( /\\s+/, '' );\r\n\r\n    // Indent and insert newlines\r\n    for( var i = 0; i < json.length; i++ ) {\r\n        var c = json.charAt(i);\r\n\r\n        switch(c) {\r\n            case '{':\r\n            case '[':\r\n                out += c + \"\\n\" + tabs(++indent);\r\n                break;\r\n            case '}':\r\n            case ']':\r\n                out += \"\\n\" + tabs(--indent) + c;\r\n                break;\r\n            case ',':\r\n                out += \",\\n\" + tabs(indent);\r\n                break;\r\n            case ':':\r\n                out += \": \";\r\n                break;\r\n            default:\r\n                out += c;\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Strip whitespace from numeric arrays and put backslashes\r\n    // and strings back in\r\n    out = out\r\n        .replace( /\\[[\\d,\\s]+?\\]/g, function(m){ return m.replace(/\\s/g,''); } )\r\n        .replace( /\\\\(\\d+)\\\\/g, pop ) // strings\r\n        .replace( /\\\\(\\d+)\\\\/g, pop ); // backslashes in strings\r\n\r\n    return out;\r\n};\r\n\r\n\r\nexport const saveFile = (function () {\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.style = \"display: none\";\r\n    return function (data, fileName) {\r\n        var json = data,\r\n            blob = new Blob([json], {type: \"octet/stream\"}),\r\n            url = window.URL.createObjectURL(blob);\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    };\r\n}());","import React, {Component} from 'react';\r\nimport Table from \"./Table\";\r\nimport TableRow from \"./TableRow\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport codeStyle from \"react-syntax-highlighter/dist/cjs/styles/hljs/monokai-sublime\";\r\nimport {jsonFormatter, saveFile} from \"../util/util\";\r\n\r\nconst singleRow = {\r\n    \"name\": \"title\",\r\n    \"dbType\": \"string\",\r\n    \"htmlType\": \"text\",\r\n    \"validations\": \"required\",\r\n    \"searchable\": true,\r\n    \"fillable\": true,\r\n    \"primary\": false,\r\n    \"inForm\": true,\r\n    \"inIndex\": true,\r\n    \"inView\": true\r\n};\r\n\r\nexport const dbTypes = [\"string\", \"text\", \"integer\", \"enum\"];\r\nexport const htmlTypes = [\"text\", \"textarea\", \"email\", \"date\", \"number\", \"password\", \"select\", \"checkbox\", \"radio\", \"file\", \"toggle-switch\"];\r\nexport const validationTypes = [\"required\", \"string\", \"numeric\"];\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            schemas: [],\r\n            modelName: 'Schema'\r\n        };\r\n        this.state.schemas.push({...singleRow});\r\n    }\r\n\r\n    addRow = () => {\r\n        let cState = this.state.schemas;\r\n        cState.push({...singleRow});\r\n        this.setState({schemas: cState});\r\n    }\r\n\r\n    removeRow = () => {\r\n        let cState = this.state.schemas;\r\n        cState.pop();\r\n        this.setState({schemas: cState});\r\n    }\r\n\r\n    updateModelName = (event) => {\r\n        this.setState({modelName: event.target.value});\r\n    }\r\n\r\n    updateRow = (input, index) => {\r\n        console.log(input.type, input.value);\r\n        let newState = [...this.state.schemas];\r\n        if (input.type === 'checkbox') {\r\n            newState[index][input.name] = !newState[index][input.name];\r\n        } else {\r\n            newState[index][input.name] = input.value;\r\n        }\r\n        this.setState({schemas: newState});\r\n    }\r\n\r\n    downloadFile = () => {\r\n        saveFile(jsonFormatter(JSON.stringify(this.state.schemas)), this.state.modelName + \".json\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container m-auto bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 mt-4\">\r\n                <h3 className=\"text-3xl text-blue-600\">Infyom Json Schema Generator</h3>\r\n                <div className=\"mt-4 mb-4\">\r\n                    <input type=\"text\" name=\"model\" id=\"model\" placeholder=\"Enter model/schema name..\"\r\n                           value={this.state.modelName} onChange={this.updateModelName} title={\"Enter schema name here\"}\r\n                           className=\"border rounded py-2 px-3 text-grey-darkest focus:outline-none focus:bg-white focus:border-gray-500\"/><span className=\"text-gray-600\">.json</span>\r\n                </div>\r\n                <Table>\r\n                    {\r\n                        this.state.schemas.map((row, index) => {\r\n                            return (\r\n                                <TableRow key={index}\r\n                                          row={row}\r\n                                          index={index}\r\n                                          onChange={(input) => {\r\n                                              this.updateRow(input, index)\r\n                                          }}/>\r\n                            );\r\n                        })\r\n                    }\r\n                </Table>\r\n                <div className=\"flex items-center justify-between mt-4\">\r\n                    <button\r\n                        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        type=\"button\" onClick={this.addRow}>\r\n                        Add Row\r\n                    </button>\r\n                    <button onClick={this.downloadFile}\r\n                            className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\">\r\n                        <svg className=\"fill-current w-f h-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                             viewBox=\"0 0 20 20\">\r\n                            <path d=\"M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z\"/>\r\n                        </svg>\r\n                        <span>Download</span>\r\n                    </button>\r\n                    <button onClick={this.removeRow}\r\n                            className=\"bg-transparent hover:bg-red-500 text-red-500 font-semibold hover:text-white py-2 px-4 border border-red-500 hover:border-transparent rounded\">\r\n                        Remove Row\r\n                    </button>\r\n                </div>\r\n                <div className=\"overflow-auto mt-3\">\r\n                    <SyntaxHighlighter language=\"json\" style={codeStyle}>\r\n                        {jsonFormatter(JSON.stringify(this.state.schemas))}\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './tailwind.min.css';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}